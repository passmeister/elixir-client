# NOTE: This class is auto generated by the swagger code generator program.
# https://github.com/swagger-api/swagger-codegen.git
# Do not edit the class manually.

defmodule DemoClientForPassmeisterAppleWalletAndGoogleWalletAPI.Api.Pass do
  @moduledoc """
  API calls for all endpoints tagged `Pass`.
  """

  alias DemoClientForPassmeisterAppleWalletAndGoogleWalletAPI.Connection
  import DemoClientForPassmeisterAppleWalletAndGoogleWalletAPI.RequestBuilder


  @doc """
  This method creates or (if the pass id already exists) updates a pass, so you don&#39;t have to track ids and creation status of your passes.
  This method creates or (if the pass id already exists) updates a pass, so you don&#39;t have to track ids and creation status of your passes.

  ## Parameters

  - connection (DemoClientForPassmeisterAppleWalletAndGoogleWalletAPI.Connection): Connection to server
  - pass_type_id (Object): your pass type id, for example P963493 (Urban Fitness)
  - opts (KeywordList): [optional] Optional parameters
    - :pass_id (Object): id of the pass (provided by you when creating the pass or automatically set by passmeister)

  ## Returns

  {:ok, %{}} on success
  {:error, info} on failure
  """
  @spec create_or_update_pass(Tesla.Env.client, DemoClientForPassmeisterAppleWalletAndGoogleWalletAPI.Model.Object.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def create_or_update_pass(connection, pass_type_id, opts \\ []) do
    optional_params = %{
      :"passId" => :query
    }
    %{}
    |> method(:post)
    |> url("/pass")
    |> add_param(:query, :"passTypeId", pass_type_id)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(false)
  end

  @doc """
  Delete pass by pass id.
  Delete pass by pass id.

  ## Parameters

  - connection (DemoClientForPassmeisterAppleWalletAndGoogleWalletAPI.Connection): Connection to server
  - pass_type_id (Object): your pass type id, for example P963493 (Urban Fitness)
  - pass_id (Object): id of the pass
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %{}} on success
  {:error, info} on failure
  """
  @spec delete_pass(Tesla.Env.client, DemoClientForPassmeisterAppleWalletAndGoogleWalletAPI.Model.Object.t, DemoClientForPassmeisterAppleWalletAndGoogleWalletAPI.Model.Object.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def delete_pass(connection, pass_type_id, pass_id, _opts \\ []) do
    %{}
    |> method(:delete)
    |> url("/pass")
    |> add_param(:query, :"passTypeId", pass_type_id)
    |> add_param(:query, :"passId", pass_id)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(false)
  end

  @doc """
  Get pass information by pass id.
  Get pass information by pass id.

  ## Parameters

  - connection (DemoClientForPassmeisterAppleWalletAndGoogleWalletAPI.Connection): Connection to server
  - pass_type_id (Object): your pass type id, for example P963493 (Urban Fitness)
  - pass_id (Object): id of the pass
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %{}} on success
  {:error, info} on failure
  """
  @spec get_pass(Tesla.Env.client, DemoClientForPassmeisterAppleWalletAndGoogleWalletAPI.Model.Object.t, DemoClientForPassmeisterAppleWalletAndGoogleWalletAPI.Model.Object.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def get_pass(connection, pass_type_id, pass_id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/pass")
    |> add_param(:query, :"passTypeId", pass_type_id)
    |> add_param(:query, :"passId", pass_id)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(false)
  end

  @doc """
  Retrieve the list of active pass ids for a given pass type.
  Retrieve the list of active pass ids for a given pass type.

  ## Parameters

  - connection (DemoClientForPassmeisterAppleWalletAndGoogleWalletAPI.Connection): Connection to server
  - pass_type_id (Object): your pass type id, for example P963493 (Urban Fitness)
  - opts (KeywordList): [optional] Optional parameters
    - :page (Object): 
    - :limit (Object): 

  ## Returns

  {:ok, %{}} on success
  {:error, info} on failure
  """
  @spec pass_list(Tesla.Env.client, DemoClientForPassmeisterAppleWalletAndGoogleWalletAPI.Model.Object.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def pass_list(connection, pass_type_id, opts \\ []) do
    optional_params = %{
      :"page" => :query,
      :"limit" => :query
    }
    %{}
    |> method(:get)
    |> url("/pass/list")
    |> add_param(:query, :"passTypeId", pass_type_id)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(false)
  end

  @doc """
  Send updates to all active passes for a given pass type.
  For example: you changed the pass type layout and now you want to update all installed passes. (The API call only confirms the scheduling of the updates, actual updating of passes on your customers devices can take a while.)

  ## Parameters

  - connection (DemoClientForPassmeisterAppleWalletAndGoogleWalletAPI.Connection): Connection to server
  - pass_type_id (Object): your pass type id, for example P963493 (Urban Fitness)
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %{}} on success
  {:error, info} on failure
  """
  @spec pass_sync(Tesla.Env.client, DemoClientForPassmeisterAppleWalletAndGoogleWalletAPI.Model.Object.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def pass_sync(connection, pass_type_id, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/pass/sync")
    |> add_param(:query, :"passTypeId", pass_type_id)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(false)
  end
end
